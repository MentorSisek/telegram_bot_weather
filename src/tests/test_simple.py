from unittest.mock import AsyncMock, MagicMock

import pytest
from aiogram.types import Chat, Message, User

from telegram.handlers import start_handler, weather_handler


class TestWeatherBot:
	@pytest.fixture
	def mock_message(self):
		"""–°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
		message = MagicMock(spec=Message)
		message.from_user = MagicMock(spec=User)
		message.chat = MagicMock(spec=Chat)
		message.answer = AsyncMock()
		message.reply = AsyncMock()
		return message

	@pytest.mark.asyncio
	async def test_start_command(self, mock_message):
		"""–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start."""
		await start_handler(mock_message)

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
		mock_message.answer.assert_called_once()
		reply_text = mock_message.answer.call_args[0][0]
		assert '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã' in reply_text
		assert '/weather' in reply_text

	@pytest.mark.asyncio
	async def test_weather_command_success(self, mock_message):
		"""–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã."""
		mock_message.text = '/weather Moscow'

		# –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
		mock_client = MagicMock()
		mock_client.get_weather = AsyncMock(
			return_value={
				'current_weather': {
					'temperature': 15.5,
					'windspeed': 3.2,
					'time': '2025-01-01T12:00',
				}
			}
		)
		mock_client.format_weather.return_value = (
			'üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 15.5¬∞C\nüí® –í–µ—Ç–µ—Ä: 3.2 –º/—Å'
		)

		await weather_handler(mock_message, mock_client, 'celsius')

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
		mock_client.get_weather.assert_called_once_with(city='Moscow', units='celsius')
		mock_message.reply.assert_called_once_with(
			'üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 15.5¬∞C\nüí® –í–µ—Ç–µ—Ä: 3.2 –º/—Å'
		)

	@pytest.mark.asyncio
	async def test_weather_command_no_city(self, mock_message):
		"""–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /weather –±–µ–∑ –≥–æ—Ä–æ–¥–∞."""
		mock_message.text = '/weather'

		mock_client = MagicMock()

		await weather_handler(mock_message, mock_client, 'celsius')

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –ø—Ä–æ—Å–∏—Ç —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥
		mock_message.answer.assert_called_once_with('‚ö† –£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥: /weather Moscow')
		mock_client.get_weather.assert_not_called()
