import json
import logging

import aiohttp

from .cache import Cache

logger = logging.getLogger('openmeteo')


class OpenMeteoClient:
	base_url: str = 'https://api.open-meteo.com/v1/forecast'
	geocode_url: str = 'https://nominatim.openstreetmap.org/search'
	unit_map: dict = {'celsius': 'metric', 'fahrenheit': 'imperial'}

	def __init__(self, redis_url_for_cache: str | None = None):
		self.cache = Cache(redis_url_for_cache)

	async def geocode_city(self, city: str):
		"""–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ Nominatim"""
		key = f'geocode:{city}'

		cached = await self.cache.get(key)
		if cached:
			lat, lon = map(float, cached.split(','))
			return lat, lon

		params = {'q': city, 'format': 'json', 'limit': 1}
		async with aiohttp.ClientSession() as session:
			async with session.get(
				self.geocode_url, params=params, headers={'User-Agent': 'weather-bot'}
			) as resp:
				if resp.status != 200:
					return None
				data = await resp.json()
				if not data:
					return None
				lat, lon = float(data[0]['lat']), float(data[0]['lon'])

		await self.cache.set(key, f'{lat},{lon}')
		return lat, lon

	async def get_weather(
		self,
		units: str,
		city: str | None = None,
		lat: float | None = None,
		lon: float | None = None,
	):
		"""–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –∏–∑ Open-Meteo (–ø–æ –≥–æ—Ä–æ–¥—É –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º)"""
		units = self.unit_map[units]
		if city:
			coords = await self.geocode_city(city)
			if not coords:
				return None
			lat, lon = coords
			key = f'weather:city:{city}:{self.unit_map.get(units)}'
		elif lat and lon:
			key = f'weather:coords:{lat}:{lon}:{units}'
		else:
			return None

		cached = await self.cache.get(key)
		if cached:
			return json.loads(cached)

		params = {
			'latitude': lat,
			'longitude': lon,
			'current_weather': 'true',
			'timezone': 'auto',
		}

		async with aiohttp.ClientSession() as session:
			try:
				async with session.get(self.base_url, params=params) as resp:
					if resp.status != 200:
						print(await resp.text())
						return None
					data = await resp.json()
			except Exception as e:
				print(e)
				return None

		await self.cache.set(key, json.dumps(data), ex=300)

		return data

	def format_weather(self, data: dict, units: str) -> str:
		"""–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
		if not data or 'current_weather' not in data:
			return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.'

		cw = data['current_weather']
		temp = cw['temperature']
		wind = cw.get('windspeed')
		unit_symbol = '¬∞C'

		if units == 'fahrenheit':  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –§–∞—Ä–µ–Ω–≥–µ–π—Ç—ã
			temp = temp * 9 / 5 + 32
			unit_symbol = '¬∞F'

		return (
			f'üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}{unit_symbol}\n'
			f'üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å\n'
			f'‚è± –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {cw["time"]}'
		)
