from typing import Literal

from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Location, Message

from openmeteo.client import OpenMeteoClient

router = Router()


@router.message(CommandStart())
async def start_handler(message: Message):
	await message.answer(
		'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.\n'
		'–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n'
		'‚Ä¢ /weather <–≥–æ—Ä–æ–¥> ‚Äî —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ\n'
		'‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ‚Äî –ø–æ–≥–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º\n'
		'‚Ä¢ /celsius –∏–ª–∏ /fahrenheit ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è'
	)


@router.message(Command('weather'))
async def weather_handler(
	message: Message,
	openmeteo_client: OpenMeteoClient,
	metric: Literal['fahrenheit', 'celsius'],
):
	args = message.text.split(maxsplit=1)  # type: ignore
	if len(args) < 2:
		await message.answer('‚ö† –£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥: /weather Moscow')
		return

	city = args[1]
	data = await openmeteo_client.get_weather(city=city, units=metric)
	if not data:
		await message.reply('üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.')
		return

	await message.reply(openmeteo_client.format_weather(data, metric))


@router.message(F.location)
async def location_handler(
	message: Message,
	openmeteo_client: OpenMeteoClient,
	metric: Literal['fahrenheit', 'celsius'],
):
	loc: Location = message.location  # type: ignore
	data = await openmeteo_client.get_weather(
		lat=loc.latitude, lon=loc.longitude, units=metric
	)
	if not data:
		await message.reply('üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.')
		return

	await message.reply(openmeteo_client.format_weather(data, metric))


@router.message(Command('celsius'))
async def set_celsius(message: Message, state: FSMContext):
	await state.update_data(metric='celsius')
	await message.reply('‚úÖ –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: –≥—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è (¬∞C)')


@router.message(Command('fahrenheit'))
async def set_fahrenheit(message: Message, state: FSMContext):
	await state.update_data(metric='fahrenheit')
	await message.reply('‚úÖ –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: –≥—Ä–∞–¥—É—Å—ã –§–∞—Ä–µ–Ω–≥–µ–π—Ç–∞ (¬∞F)')
